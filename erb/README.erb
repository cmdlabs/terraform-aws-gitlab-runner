<!-- vim: set ft=markdown: -->
![CMD Solutions|medium](https://s3-ap-southeast-2.amazonaws.com/cmd-website-images/CMDlogo.jpg)

# terraform-aws-gitlab-runner

<%= %x{ruby erb/toc.rb erb/README.erb} -%>

## Overview

This module creates a simple GitLab CI Runner using a Docker executor on a long-lived AWS EC2 instance in an Auto Scaling Group.

## AWS GitLab Runner Terraform

### Inputs

The below outlines the current parameters and defaults.

| Name | Description | Type | Default | Required |
|------|-------------|:----:|:-------:|:--------:|
<%= %x{ruby erb/variables2md.rb variables.tf} -%>

### Outputs

None.

## Example

### Obtain a Registration Token

See the GitLab docs [here](https://docs.gitlab.com/ee/ci/runners/#registering-a-specific-runner-with-a-project-registration-token)

- Go to the project in GitLab e.g. https://gitlab.com/alexharv074/test
- On the left hand side select Settings > CI/CD
- Under Runners Expand.

The registration token can be found from here.

Put the token in a tfvars file or in an environment variable:

```text
▶ export TF_VAR_registration_token=XXXXXXXXX
```

### Add a .gitlab-ci.yml to a project

Create a simple `.gitlab-ci.yml` file in the root of your project e.g.

```yaml
---
image: busybox:latest

build1:
  stage: build
  script:
    - echo "hello world"
```

### Declare the module

Here is an example usage:

```tf
<% remote = %x{git remote -v}.split("\n")[0].split[1] -%>
<%= %x{sed -E 's!source( +)=.*!source\\1= "#{remote}"!' examples/runner_default/main.tf} -%>
```

Apply that:

```text
▶ terraform apply
```

## License

Apache 2.0.
